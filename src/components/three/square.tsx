/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useRef } from "react";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Circle_1: THREE.Mesh;
    Circle_2: THREE.Mesh;
  };
  materials: {
    heavyBlue: THREE.MeshStandardMaterial;
    mateBlue: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const ref = useRef<THREE.Group>(null);

  useFrame((_state: any, _delta: any) => {
    ref!.current!.rotation.y += 0.0025;
    ref!.current!.rotation.x += 0.0025;
  });

  const { nodes, materials } = useGLTF("/square.glb") as unknown as GLTFResult;
  return (
    <group {...props} dispose={null} ref={ref}>
      <group
        name="Circle"
        position={[0, 0, 0]}
        rotation={[0.4, 2.35, -1.55]}
        scale={0.45}
      >
        <mesh
          name="Circle_1"
          geometry={nodes.Circle_1.geometry}
          material={materials.mateBlue}
        />
        <mesh
          name="Circle_2"
          geometry={nodes.Circle_2.geometry}
          material={materials.heavyBlue}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/square.glb");
